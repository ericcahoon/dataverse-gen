/* eslint-disable*/
import { <%-referencedTypes["WebApiExecuteRequest"].name%> } from "<%-referencedTypes["WebApiExecuteRequest"].import%>";
<%_ if (locals.Parameters.length>0) { _%>import { <%-referencedTypes["StructuralProperty"].name%> } from "<%-referencedTypes["StructuralProperty"].import%>";
<%_}_%>
import { <%-referencedTypes["OperationType"].name%> } from "<%-referencedTypes["OperationType"].import%>";

// Action <%-Name%>
export const <%-Name%>Metadata = {
  <%_ if (IsBound){ _%>
  boundParameter: "<%- locals.Parameters[0].Name %>",
  <%_}_%>
  parameterTypes: {
  <%_ locals.Parameters.forEach(function(param){ _%>
    "<%- param.Name %>": {
      typeName: "<%-param.Type %>",
      structuralProperty: StructuralProperty.<%- param.structuralTypeName %>
      },		
  <%});%>
  },
  operationType: OperationType.Function,
  operationName: "<%-Name%>"
};

export interface <%- Name %>Request extends <%-referencedTypes["WebApiExecuteRequest"].name%> {
<%_locals.Parameters.forEach(function(param){ _%>
  <%-param.Name%><%-(param.IsRequired || param.Name==locals.BindingParameter ? ": " : "?: ") _%><%-param.TypescriptTypes.map(function(outputType){ 
   return (outputType.importLocation ? `import("${outputType.importLocation}").` : "") + outputType.name}).join(" | ")%>;
<%_ }) _%>
}